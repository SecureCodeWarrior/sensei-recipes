id: scw:logging:slf4j-jul-object-3rd-debug
version: 9
metadata:
  name: 'SLF4J Logging: Replace java.util.logging with SLF4J (Log Object Debug)'
  shortDescription: Standardise on SLF4J by replacing this call
  level: marked_information
  language: java
  scwCategory: insufficient_logging:generic
  cweCategory: 778
  enabled: true
  tags: SLF4J;framework specific;logging;quality
search:
  methodcall:
    args:
      1:
        referenceTo:
          name:
            matches: java\.util\.logging\.Level\.(FINE|CONFIG)
      3:
        type: java.lang.Object
    argCount: 3
    name: log
    type: java.util.logging.Logger
availableFixes:
- name: '[RECOMMENDED] Replace with SLF4J debug function'
  actions:
  - rewrite:
      to: logger.debug({{{arguments.1}}}, {{{arguments.2}}})
      target: self
  - addField:
      field: private final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{{ containingClass.containingClass.name }}}.class);
      target: parentClass
- name: '[OPTIONAL] Replace with SLF4J error function'
  actions:
  - rewrite:
      to: logger.error({{{arguments.1}}}, {{{arguments.2}}})
      target: self
  - addField:
      field: private final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{{ containingClass.containingClass.name }}}.class);
      target: parentClass
- name: '[OPTIONAL] Replace with SLF4J info function'
  actions:
  - rewrite:
      to: logger.info({{{arguments.1}}}, {{{arguments.2}}})
      target: self
  - addField:
      field: private final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{{ containingClass.containingClass.name }}}.class);
      target: parentClass
- name: '[OPTIONAL] Replace with SLF4J warn function'
  actions:
  - rewrite:
      to: logger.warn({{{arguments.1}}}, {{{arguments.2}}})
      target: self
  - addField:
      field: private final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{{ containingClass.containingClass.name }}}.class);
      target: parentClass
- name: '[OPTIONAL] Replace with SLF4J trace function'
  actions:
  - rewrite:
      to: logger.trace({{{arguments.1}}}, {{{arguments.2}}})
      target: self
  - addField:
      field: private final static org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger({{{ containingClass.containingClass.name }}}.class);
      target: parentClass
